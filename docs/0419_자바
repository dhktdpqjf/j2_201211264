
factory method - 대응관계일 때 많이 씀.

*factory pattern 설명하는 법 *
	객체 생성을 은닉하는 것.
	File f = new File() x
	File f = open() o
 이게 factory pattern 인데 세 가지 방법이 있다. simple factory, factory method는 객체생성할 때 abstract 쓰는 것, abstract factory method는 아직 안 함 


abstract class PizzaStore {
  -{abstract}createPizza(String):Pizza //abstract method는 {}에 넣어줘야 함. 그러면 그림에 italic 채로 들어감
  +orderPizza(String):Pizza
}


//PizzaStore -->SimpleFactory //createPizza가 abstract가 되면서 얘는 삭제

note left of PizzaStore
"""public Pizza orderPizza(String type) {
    Pizza pizza;
    pizza=createPizza(type); //siplefactory를 이용하지않고 바로 createPizza를 함. 왜냐하면 abstract이기 때문에 자식 클래스가 오버라이딩하면 됨.
    pizza.prepare();
    pizza.bake();
    pizza.cut();
    pizza.box();
    return pizza;
}"""
end note

PizzaStore <|-- NYPizzaStore
PizzaStore <|-- ChicagoPizzaStore //얘네가 상속

Pizza <|--ChicagoStyle\nPizza // \n쓰면 개행


+ public
# protected
- private
~ package



PizzaStore s = new NYPizzaStore(); //왼쪽에는 부모 오른쪽에는 자식(=programming to abstraction). 부모는 고정. 자식은 변동
					//추상클래스를 가지고 프로그래밍한다. 메소드는 부모꺼를 쓸 거니까.



dr.java


> import headfirst.factory.pizzafm.*;
> PizzaStore s = new NYPizzaStore();
> s.orderPizza("cheese");
Preparing NY Style Sauce and Cheese Pizza
Baking NY Style Sauce and Cheese Pizza
Cutting NY Style Sauce and Cheese Pizza
Boxing NY Style Sauce and Cheese Pizza






