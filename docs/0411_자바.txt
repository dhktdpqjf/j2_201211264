
decorator 패턴 - "내 안에 너 있다"
 is-a 상속 (least surprise 지향)
 has-a 연관관계  를 둘 다 가짐. 


◆ black diamond - 센 관계, 파괴되지 x
◇ white diamond - 약한관계


*같은 부모로 다른 객체를 가짐. 부모를 생성자에서 가지고 있음.


GoF "attach additional responsibilities(함수, 기능) to an object dynamically....."
 *객체지향에서의 dynamic :컴파일 타임에는 super. 런타임에는 섭클래스가 들어와서 사용되는 것 = polymorphic




*class explosion이라는 문제가 발생 -> decorator 패턴 사용하게 됨



<PlantText>



class Component //음료
class Decorator //커피 종류
Component <|-- ConcreteComponent
Class Decorator
Component <|-- Decorator //데코레이터가 컴포넌트 밑으로 가는 게 중요**

Decorator *--> Compontn //데코레이터가 컴포넌트를 쓰는데 has-a 관계를 가진다는 것! 
			//o-->화이트다이아몬드

Decorator <|-- ConcreteDecorator //데코레이터가 추상적이기이기 떄문에 구체적으로 추가할 것(decorating할 것)은 ConcreteComponent로 상속받아서 구현


----------------------------
class Beverage
class HouseBlend
class DarkRoast
Beverage <|-- HouseBlend
Beverage <|-- DarkRoast

class CondimentDecorator{
    -b:Beverage 
    CondimentDecorator(b:Beverage)//생성자가 상속이 될까? default 생성자(인자없는 거)가 있고 
				  //그냥 생성자(인자 있는 거)가 있는데, 둘 다 상속 X. 따라서 이거 안됨. 지워야함
}

Beverage <|-- CondimentDecorator
Beverage <--* CondimentDecorator //has-a 관계기 때문에 생성자에 Beverage를 정의해줘야함
CondimentDecorator <|-- Milk
class Milk{
    +Milk(b:Beverage)
}


---------------------------

abstract :미구현 상태로 되어 있는 것. 빠져 있는 것. abstract class는 모든함수가 abstract일 필요없음
interface : 속성이 없음. 그리고 모든 함수가 abstract임


*메모리를 생각했을 때, 
lazy instantiation - 객체는 new class()가 되었을 때 생성이 됨. 근데 그러지않고 생성자에다가 넣어서 생성을하면 (블랙다이아몬드면)
속도가 빨라짐! 이미 만들어놧으니까 !! 이것이 바로 ->eager instantiation



"내 안에 너 있다" = 상속관계를 가진 슈퍼클래스를 생성자에서 가지고, 함수에다가 슈퍼클래스를 가지고 돌리는 것

		= uml에서 블랙다이아몬드랑 상속이랑 둘 다 가지고 있음.




